from datetime import datetime, timedelta
from loguru import logger

from app.schemas.users_schemas import SMSRequest
from app.tg_bot.create_bot import bot
from app.core.config import settings, scheduler, broker
from app.dao.bookings_dao import BookingDAO
from app.api.utils import sms_service
from app.db.database import async_session_maker


async def disable_booking():
    async with async_session_maker() as session:
        await BookingDAO(session).complete_past_bookings()


@broker.subscriber("admin_msg")
async def send_booking_msg(msg: str):
    for admin in settings.ADMIN_IDS:
        await bot.send_message(admin, text=msg)


async def send_sms_scheduler(request: SMSRequest):
    result = await sms_service.send_sms(request.phone, request.message)
    return {'status': 'success', 'data': result, 'message': 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'}


async def send_user_msg(user_id: int, text: str):
    await bot.send_message(user_id, text=text)


@broker.subscriber('noti_user')
async def schedule_user_notifications(user_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏."""
    now = datetime.now()

    notifications = [
        {
            "time": now + timedelta(minutes=1),
            "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞! –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. "
            "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ! üòä",
        },
        {
            "time": now + timedelta(minutes=3),
            "text": "–ù–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ —Å–Ω–æ–≤–∞? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–µ –Ω–æ–≤–æ–µ –º–µ–Ω—é! üçΩÔ∏è",
        },
        {
            "time": now + timedelta(minutes=12),
            "text": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É WELCOMEBACK. üéâ",
        },
        {
            "time": now + timedelta(minutes=24),
            "text": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å! üéÅ",
        },
    ]

    for i, notification in enumerate(notifications):
        job_id = f"user_notification_{user_id}_{i}"
        scheduler.add_job(
            send_user_msg,  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞
            "date",  # –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
            run_date=notification["time"],  # –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
            args=[user_id, notification["text"]],  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
            id=job_id,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
            replace_existing=True,  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        )

        scheduler.add_job(
            sms_service.send_sms,
            "date",
            run_date=notification["time"] + timedelta(seconds=5),
            args=["89939654511", notification["text"][:10]],
            id=f"sms_{user_id}_{i}",
            replace_existing=True,
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {notification['time']}")
